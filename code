# Advanced Contact Manager using Python + Tkinter + SQLite

import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3

# Initialize DB
conn = sqlite3.connect("contacts.db") give name for this prohect i wanted to uplaod this one only you are giving different things  
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS contacts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                first_name TEXT NOT NULL,
                last_name TEXT NOT NULL,
                address TEXT,
                email TEXT UNIQUE,
                phone TEXT UNIQUE)''')
conn.commit()

# App Logic
class ContactApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Management System")
        self.root.geometry("700x500")
        self.root.configure(bg="#f0f8ff")

        title = tk.Label(root, text="Contact Management System", font=("Segoe UI", 20, "bold"), bg="#f0f8ff", fg="#333")
        title.pack(pady=10)

        # Frame for Form
        form_frame = tk.Frame(root, bg="#f0f8ff")
        form_frame.pack(pady=10)

        labels = ["First Name", "Last Name", "Address", "Email", "Phone"]
        self.entries = []
        for i, text in enumerate(labels):
            tk.Label(form_frame, text=text, font=("Segoe UI", 12), bg="#f0f8ff").grid(row=i, column=0, sticky=tk.W, padx=10, pady=5)
            entry = tk.Entry(form_frame, width=40, font=("Segoe UI", 10))
            entry.grid(row=i, column=1, pady=5, padx=10)
            self.entries.append(entry)

        # Buttons
        btn_frame = tk.Frame(root, bg="#f0f8ff")
        btn_frame.pack(pady=10)

        tk.Button(btn_frame, text="Add", width=15, command=self.add_contact, bg="#4CAF50", fg="white", font=("Segoe UI", 10)).grid(row=0, column=0, padx=5)
        tk.Button(btn_frame, text="View", width=15, command=self.view_contacts, bg="#2196F3", fg="white", font=("Segoe UI", 10)).grid(row=0, column=1, padx=5)
        tk.Button(btn_frame, text="Update", width=15, command=self.update_contact, bg="#FFC107", fg="black", font=("Segoe UI", 10)).grid(row=0, column=2, padx=5)
        tk.Button(btn_frame, text="Delete", width=15, command=self.delete_contact, bg="#F44336", fg="white", font=("Segoe UI", 10)).grid(row=0, column=3, padx=5)

        # Treeview for displaying records
        style = ttk.Style()
        style.configure("Treeview.Heading", font=("Segoe UI", 10, "bold"))
        style.configure("Treeview", font=("Segoe UI", 10))

        self.tree = ttk.Treeview(root, columns=("ID", "First Name", "Last Name", "Address", "Email", "Phone"), show='headings')
        for col in self.tree["columns"]:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=100, anchor="center")
        self.tree.pack(pady=20)

    def clear_entries(self):
        for entry in self.entries:
            entry.delete(0, tk.END)

    def add_contact(self):
        data = tuple(entry.get() for entry in self.entries)
        if not all(data):
            messagebox.showerror("Error", "All fields are required")
            return
        try:
            c.execute("INSERT INTO contacts (first_name, last_name, address, email, phone) VALUES (?, ?, ?, ?, ?)", data)
            conn.commit()
            messagebox.showinfo("Success", "Contact added successfully")
            self.clear_entries()
            self.view_contacts()
        except sqlite3.IntegrityError:
            messagebox.showerror("Error", "Email or Phone already exists")

    def view_contacts(self):
        for i in self.tree.get_children():
            self.tree.delete(i)
        c.execute("SELECT * FROM contacts")
        for row in c.fetchall():
            self.tree.insert("", tk.END, values=row)

    def update_contact(self):
        selected = self.tree.focus()
        if not selected:
            messagebox.showerror("Error", "Select a contact to update")
            return
        values = self.tree.item(selected, 'values')
        data = tuple(entry.get() for entry in self.entries)
        if not all(data):
            messagebox.showerror("Error", "All fields are required")
            return
        try:
            c.execute("UPDATE contacts SET first_name=?, last_name=?, address=?, email=?, phone=? WHERE id=?", (*data, values[0]))
            conn.commit()
            messagebox.showinfo("Success", "Contact updated successfully")
            self.clear_entries()
            self.view_contacts()
        except sqlite3.IntegrityError:
            messagebox.showerror("Error", "Email or Phone already exists")

    def delete_contact(self):
        selected = self.tree.focus()
        if not selected:
            messagebox.showerror("Error", "Select a contact to delete")
            return
        values = self.tree.item(selected, 'values')
        c.execute("DELETE FROM contacts WHERE id=?", (values[0],))
        conn.commit()
        messagebox.showinfo("Success", "Contact deleted successfully")
        self.view_contacts()


if __name__ == '__main__':
    root = tk.Tk()
    app = ContactApp(root)
    root.mainloop()


